Title: Pushbot by Catalytic

----

Keywords: web, enterprise, product delivery 

----

Text: *Key accountabilities: component library architecture, component UX/UI, implementation documentation, developer support*

As a task and process management platform for enterprise users, Pushbot necessitated a consumer-grade redesign that would disrupt the BPM and RPA industries. Atomic design principles were leveraged to help facilitate the design's implementation as a React-based Storybook.

(content-image: sketch-v1.png description: AppStructure ideation)

Early designs attempted to streamline the experience by overtly joining various concepts, such as tasks that were always shown as the children of processes.

(content-image: v1-task-list.png description: early task list)

An experimental, search-based interface was briefly explored and tested. Users would navigate through the app via raw text entry or the mixing-and-matching of tags: a hybrid command-line GUI.

(content-image: v3-search.png description: search homepage)

(content-image: v3-search-detail.png description: search builder & recommended tags)

Following this exploratory phase, the design team aligned all concepts with the product roadmap and business goals. From this, a final design system emerged.

Beginning with login, a card-based structure was adopted.

(content-image: login.png description: login)

After logging in, Pushbot immediately presented users with urgent tasks, as well as processes that they were involved in. Urgency was determined by priority level, time overdue, and the number of users affected by a delay. 

(content-image: today.png description: urgent tasks & processes)

(content-image: today-mobile.png description: mobile layout)

Due to the hybrid userbase of taskers and managers, the navigation menu required a split hierarchy. Common, everyday sections were shown by default, whereas advanced platform features required a second interaction.

(content-image: sidenav-personal.png description: default view)

(content-image: sidenav-detail.png description: icon system)

Pushbot consisted of three orders of system-level objects: tasks, processes, and templates. On each list page, users could filter and sort using a "Mad Libs" toolbar, in addition to choosing between default and condensed modes.

(content-image: task-list.png description: task list, default)

(content-image: task-list-detail.png description: task ListItem, default)

The condensed ("expert") display mode removed any task instructions, avatars, and iconography. Additionally, if a task had no required fields, a button for immediate completion surfaced.

(content-image: task-list-expert.png description: task list, expert)

(content-image: task-list-expert-detail.png description: task ListItem, expert)

Process ListItems built upon the backbone of tasks: they featured a visualization of current progress, highlighted the estimated completion date, exposed categorization, and linked to the parent template.

As the ETA slipped farther into the future, the due date moved to the left. Time was expressed as a proportional relationship between each side of the marker.

(content-image: process-list.png description: process list)

(content-image: process-list-detail.png description: process ListItem)

Templates utilized a slightly-modified ListItem grid. This layout evoked ecommerce and could be readily extended to a future public marketplace.

(content-image: template-list.png description: template grid)

Digging into an actual task, ListItem components were reused to frame and affirm the user's mental journey. Comments flowed above a task detail's InputFields, updating users on important notes before they got to work.

(content-image: sketch-task-detail-2.png description: structural outline)

(content-image: task-detail.png description: task detail)

(content-image: task-detail-comments-detail.png description: comment ListItem)

When a task was completed, users would be prompted with a dialog that surfaced the next tasks in their queue. As the primary KPI, task completion needed to be constantly encouraged. 

(content-image: task-detail-dialog.png description: task completion dialog)

(content-image: task-detail-dialog-detail.png description: dialog actions)

Within a process detail, users could filter objects shown on the timeline and reverse the chronological sort.

(content-image: process-detail-1.png description: process detail, top)

As users scrolled deeper into the timeline, the top card condensed and opened up more visual real estate.

(content-image: process-detail-2.png description: process detail, scrolled)

(content-image: process-detail-timeline-detail.png description: timeline structure)

(content-image: sketch-process-detail.png description: initial sketches behind the timeline)

On each list page, users could add another object. In this case, they could create a task that exists outside of any other process.

(content-image: new-quick-task.png description: adding a quick-task)

Similar to the quick-task option available on the task list page, users could add an impromptu task to an in-flight process. If desired, this change could flow upwards to the template-level and affect all subsequent, related processes. 

(content-image: new-task-in-process.png description: final: adding an in-flight task)